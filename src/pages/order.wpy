<template>
  <view class="container">
    <repeat for="{{order.list}}"
            key="index" index="index" item="item">
      <view class="order">
        <view class="info" @tap="onOrderTap" data-id="{{item.id}}">
          <view class="order-number">
            订单编号：{{item.outTradeNo}}
          </view>
          <view wx:if="{{item.status === 'waitingPay'}}" class="status active">
            等待付款
          </view>
          <view wx:if="{{item.status === 'paying'}}" class="status active">
            付款中
          </view>
          <view wx:if="{{item.status === 'calcel'}}" class="status">
            已取消
          </view>
          <view wx:if="{{item.status === 'finish'}}" class="status">
            已完成
          </view>
          <view class="time">
            下单时间：{{item.createTime}}
          </view>
          <view class="dish-name">
            {{item.orderItems[0].name}}
          </view>
          <view class="dish-number">
            {{item.orderItems.length > 1 ? ('等 ' + item.orderItems.length + ' 件商品') : ' '}}
          </view>
          <view class="total">
            ￥{{item.totalPrice}}
          </view>
        </view>
        <view class="action">
          <view wx:if="{{item.status === 'waitingPay'}}" class="pay"
                @tap="onPayTap" data-id="{{item.id}}">
            立即支付
          </view>
          <view wx:if="{{item.status === 'paying'}}" class="wait">
            等待就餐
          </view>
          <view wx:if="{{item.status === 'calcel' || item.status === 'finish'}}" class="one-more"
                @tap="onOneMoreTap" data-data="{{item}}">
            再来一单
          </view>
        </view>
      </view>
    </repeat>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import {connect} from 'wepy-redux'
  import 'wepy-async-function';
  import {getOrder, orderPay, confirmOrderPay} from '../store/actions/order'
  import {CLEAR_ORDER, CLEAR_MENU, CLEAR_SHOPPING_CAR, UPDATE_MENU, UPDATE_SHOPPING_CAR} from '../store/types'

  @connect({
    order(state) {
      return state.order
    },
    menu(state) {
      return state.menu
    },
  }, {
    getOrder,
    orderPay,
    confirmOrderPay,
    clearOrder: CLEAR_ORDER,
    clearMenu: CLEAR_MENU,
    clearShoppingCar: CLEAR_SHOPPING_CAR,
    updateMenu: UPDATE_MENU,
    updateShoppingCar: UPDATE_SHOPPING_CAR,
  })
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '我的订单',
      onReachBottomDistance: 400,
    }
    components = {}

    data = {}

    methods = {
      onOrderTap: e => {
        wx.navigateTo({url: '/pages/orderDetail?id=' + e.currentTarget.dataset.id})
      },
      onPayTap: async e => {
        wx.showLoading({
          title: '支付中',
        })
        const id = e.currentTarget.dataset.id
        const {orderPay, confirmOrderPay} = this.methods
        const payData = await orderPay({orderId: id})
        const payMessage = await wepy.requestPayment({
          ...payData.payload.data,
          package: payData.payload.data.packageValue
        })
          .catch(error => {
            wx.showToast({
              title: '支付失败',
              icon: 'none'
            })
          })
        if (payMessage) {
          confirmOrderPay({id})
          wx.showToast({title: '支付成功'})
          this.getOrder()
        }
      },
      onOneMoreTap: e => {
        const order = e.currentTarget.dataset.data
        this.methods.clearMenu()
        this.methods.clearShoppingCar()
        const newDishType = this.menu.dishType
        let dishes = [], number = 0, total = 0
        order.orderItems.map(item => {
          const dishTypeIndex = this.menu.dishType.findIndex(type => type.id === item.dishTypeId)
          if (dishTypeIndex !== -1) {
            const dishType = this.menu.dishType[dishTypeIndex]
            const dishIndex = dishType.dishes.findIndex(dish => dish.id === item.dishId)
            if (dishIndex !== -1) {
              const dish = dishType.dishes[dishIndex]
              dishes.push({
                ...dish,
                number: item.dishNum,
                index: dishIndex,
                typeIndex: dishTypeIndex,
              })
              newDishType[dishTypeIndex].number += item.dishNum
              newDishType[dishTypeIndex].dishes[dishIndex].number += item.dishNum
              number += item.dishNum
              total += item.price * item.dishNum
            }
          }
        })
        this.methods.updateMenu({
          dishType: newDishType
        })
        this.methods.updateShoppingCar({
          dishes,
          number,
          total: total.toFixed(2)
        })
        wx.switchTab({
          url: '/pages/menu'
        })
      },
    }

    events = {}

    onLoad() {
      this.getOrder()
    }

    onReachBottom() {
      if (!this.order.lastPage) {
        this.getOrder(this.order.pageNumber + 1)
      }
    }

    getOrder = (page = 1) => {
      if (page === 1) {
        this.methods.clearOrder()
      }
      this.methods.getOrder({
        page,
        pageSize: 10,
      })
    }
  }
</script>
<style lang="less">
  @import "../assets/styles/main";

  .container {
    background: #f5f5f5;
    min-height: 100vh;
    padding: ~'20rpx';

    .order {
      width: 100%;
      background: #ffffff;
      border-radius: ~'10rpx';
      border: ~'1rpx' solid #eaeaea;
      margin-bottom: ~'20rpx';

      .info {
        font-size: ~'22rpx';
        line-height: ~'40rpx';
        color: #595959;
        padding: ~'20rpx' ~'30rpx';
        border-bottom: ~'1rpx' solid #eaeaea;
        display: flex;
        flex-wrap: wrap;

        .order-number {
          width: 70%;
          color: #000000;
        }

        .status {
          width: 30%;
          text-align: right;

          &.active {
            color: #328969;
          }
        }

        .time {
          width: 100%;
        }

        .dish-name {
          max-width: ~'290rpx';
          margin-right: ~'20rpx';
          .ellipsis();
        }

        .dish-number {
          margin-right: ~'20rpx';
          flex: auto;
        }

        .total {
          width: ~'200rpx';
          text-align: right;
          color: @color-important;
          flex: none;
        }
      }

      .action {
        padding: ~'10rpx';
        display: flex;
        flex-flow: row-reverse;

        .pay, .wait, .one-more {
          width: ~'160rpx';
          height: ~'50rpx';
          line-height: ~'50rpx';
          font-size: ~'24rpx';
          text-align: center;
          background: @color-primary;
          border-radius: ~'5rpx';
        }

        .wait {
          background: #ededed;
        }
      }
    }
  }
</style>
