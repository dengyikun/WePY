<template>
  <view class="container">
    <view class="header">
      <image src="../assets/images/order_header.png"/>
      <view wx:if="{{status === 'waitingPay'}}" class="status">
        等待付款
      </view>
      <view wx:if="{{status === 'paying'}}" class="status">
        付款中
      </view>
      <view wx:if="{{status === 'calcel'}}" class="status">
        已取消
      </view>
      <view wx:if="{{status === 'finish'}}" class="status">
        已完成
      </view>
      <view>
        欢迎您的光临 您的就餐桌号为
        <text>{{diningTableNum}}</text>
        号
      </view>
      <view>
        订单编号：{{outTradeNo}}
      </view>
      <view>
        下单时间：{{createTime}}
      </view>
      <view>
        支付方式：微信支付
      </view>
    </view>
    <view class="menu">
      <view wx:if="{{numberOfDinner || dinnerTime}}" class="menu-header">
        <view wx:if="{{numberOfDinner}}" class="people">
          用餐人数：{{numberOfDinner}} 人
        </view>
        <view wx:if="{{dinnerTime}}" class="time">
          用餐时间：{{dinnerTime}}
        </view>
      </view>
      <view class="menu-list">
        <repeat for="{{orderItems}}"
                key="index" index="index" item="item">
          <view class="dish">
            <view class="name">
              {{item.name}}
            </view>
            <view class="number">
              ×{{item.dishNum}}
            </view>
            <view class="price">
              ￥{{item.price * item.dishNum}}
            </view>
          </view>
        </repeat>
        <view class="dish">
          <view class="name">
            合计
          </view>
          <view class="number">
          </view>
          <view class="price">
            ￥{{totalPrice}}
          </view>
        </view>
      </view>
    </view>
    <view wx:if="{{remark}}" class="remark">
      <view class="remark-header">
        我的备注
      </view>
      <view class="remark-text">
        {{remark}}
      </view>
    </view>
    <view class="action">
      <view wx:if="{{status === 'waitingPay'}}" @tap="onPayTap">
        立即支付
      </view>
      <view wx:if="{{status === 'paying'}}">
        等待就餐
      </view>
      <view wx:if="{{status === 'calcel' || status === 'finish'}}" @tap="onOneMoreTap">
        再来一单
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import {connect} from 'wepy-redux'
  import 'wepy-async-function';
  import {getOrderById, orderPay, confirmOrderPay} from '../store/actions/order'
  import {CLEAR_MENU, CLEAR_SHOPPING_CAR, UPDATE_MENU, UPDATE_SHOPPING_CAR} from '../store/types'

  @connect({
    menu(state) {
      return state.menu
    },
  }, {
    getOrderById,
    orderPay,
    confirmOrderPay,
    clearMenu: CLEAR_MENU,
    clearShoppingCar: CLEAR_SHOPPING_CAR,
    updateMenu: UPDATE_MENU,
    updateShoppingCar: UPDATE_SHOPPING_CAR,
  })
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '订单详情'
    }
    components = {}

    data = {
      createTime: '',
      diningTableNum: '',
      dinnerTime: '',
      id: '',
      numberOfDinner: '',
      orderItems: [],
      outTradeNo: '',
      remark: '',
      status: '',
      timeExpire: '',
      totalPrice: '',
    }

    methods = {
      onPayTap: async e => {
        wx.showLoading({
          title: '支付中',
        })
        const {orderPay, confirmOrderPay} = this.methods
        const payData = await orderPay({orderId: this.id})
        const payMessage = await wepy.requestPayment({
          ...payData.payload.data,
          package: payData.payload.data.packageValue
        })
          .catch(error => {
            wx.hideLoading()
            wx.showToast({
              title: '支付失败',
              icon: 'none'
            })
          })
        if (payMessage) {
          confirmOrderPay({id: this.id})
          wx.hideLoading()
          wx.showToast({title: '支付成功'})
          this.getOrderById(this.id)
        }
      },
      onOneMoreTap: e => {
        this.methods.clearMenu()
        this.methods.clearShoppingCar()
        const newDishType = this.menu.dishType
        let dishes = [], number = 0, total = 0
        this.orderItems.map(item => {
          const dishTypeIndex = this.menu.dishType.findIndex(type => type.id === item.dishTypeId)
          if (dishTypeIndex !== -1) {
            const dishType = this.menu.dishType[dishTypeIndex]
            const dishIndex = dishType.dishes.findIndex(dish => dish.id === item.dishId)
            if (dishIndex !== -1) {
              const dish = dishType.dishes[dishIndex]
              dishes.push({
                ...dish,
                number: item.dishNum,
                index: dishIndex,
                typeIndex: dishTypeIndex,
              })
              newDishType[dishTypeIndex].number += item.dishNum
              newDishType[dishTypeIndex].dishes[dishIndex].number += item.dishNum
              number += item.dishNum
              total += item.price * item.dishNum
            }
          }
        })
        this.methods.updateMenu({
          dishType: newDishType
        })
        this.methods.updateShoppingCar({
          dishes,
          number,
          total: total.toFixed(2)
        })
        wx.switchTab({
          url: '/pages/menu'
        })
      },
    }

    events = {}

    onLoad(options) {
      this.getOrderById(options.id)
    }

    onShow() {

    }

    getOrderById = (id) => {
      this.methods.getOrderById({id})
        .then(data => {
          const order = data.payload.data
          if (order) {
            Object.keys(order).map(key => {
              this[key] = order[key]
            })
            this.$apply()
          }
        })
    }
  }
</script>
<style lang="less">
  @import "../assets/styles/main";

  .container {
    background: #f5f5f5;
    min-height: 100vh;
    padding: ~'20rpx' ~'20rpx' ~'100rpx' ~'20rpx';

    .header {
      width: 100%;
      background: #ffffff;
      border-radius: ~'10rpx';
      border: ~'1rpx' solid #eaeaea;
      margin-bottom: ~'20rpx';
      display: flex;
      flex-flow: column;
      padding: ~'50rpx' 0;
      align-items: center;

      image {
        width: ~'144rpx';
        height: ~'130rpx';
      }

      view {
        color: #afafaf;
        font-size: ~'22rpx';
        line-height: ~'40rpx';
        width: ~'360rpx';
        text-align: left;

        text {
          color: @color-important;
        }
      }

      .status {
        font-size: ~'36rpx';
        color: #686868;
        text-align: center;
        margin: ~'10rpx' 0;
      }
    }

    .menu {
      width: 100%;
      background: #ffffff;
      border-radius: ~'10rpx';
      border: ~'1rpx' solid #eaeaea;
      margin-bottom: ~'20rpx';

      .menu-header {
        height: ~'60rpx';
        line-height: ~'60rpx';
        font-size: ~'22rpx';
        background: #f5f5f5;
        display: flex;
        padding: 0 ~'20rpx';

        .people {
          width: 50%;
          flex: auto;
        }

        .time {
          width: 50%;
          text-align: right;
          flex: auto;
        }
      }

      .menu-list {
        padding: 0 ~'20rpx';

        .dish {
          width: 100%;
          height: ~'80rpx';
          line-height: ~'80rpx';
          font-size: ~'24rpx';
          display: flex;
          border-bottom: ~'1rpx' solid #eaeaea;

          &:last-child {
            border: none;
          }

          .name {
            width: 50%;
            flex: auto;
            .ellipsis();
          }

          .number {
            width: 15%;
            text-align: center;
            color: #c1c1c1;
            flex: none;
          }

          .price {
            width: 35%;
            text-align: right;
            color: @color-important;
            flex: none;
          }
        }
      }
    }

    .remark {
      width: 100%;
      background: #ffffff;
      border-radius: ~'10rpx';
      border: ~'1rpx' solid #eaeaea;
      padding: 0 ~'20rpx';
      margin-bottom: ~'20rpx';

      .remark-header {
        width: 100%;
        height: ~'80rpx';
        line-height: ~'80rpx';
        font-size: ~'24rpx';
        border-bottom: ~'1rpx' solid #eaeaea;
      }

      .remark-text {
        width: 100%;
        color: #afafaf;
        min-height: 1.5em;
        font-size: ~'22rpx';
        line-height: 1.5;
        padding: ~'20rpx' 0;
      }
    }

    .action {
      width: 100%;
      height: ~'80rpx';
      line-height: ~'80rpx';
      font-size: ~'28rpx';
      color: #ffffff;
      text-align: center;
      background: #353535;
      position: fixed;
      left: 0;
      bottom: 0;
    }
  }
</style>
